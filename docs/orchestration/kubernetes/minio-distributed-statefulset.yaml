# apiVersion: apps/v1beta1
# kind: StatefulSet
# metadata:
#   # This name uniquely identifies the StatefulSet
#   name: minio
# spec:
#   serviceName: minio
#   replicas: 4
#   selector:
#     matchLabels:
#       app: minio # has to match .spec.template.metadata.labels
#   template:
#     metadata:
#       labels:
#         app: minio # has to match .spec.selector.matchLabels
#     spec:
#       containers:
#       - name: minio
#         env:
#         - name: MINIO_ACCESS_KEY
#           value: "minio"
#         - name: MINIO_SECRET_KEY
#           value: "minio123"
#         image: minio/minio:RELEASE.2019-09-18T21-55-05Z
#         args:
#         - server
#         - http://minio-{0...3}.minio.default.svc.cluster.local/data
#         ports:
#         - containerPort: 9000
#         # These volume mounts are persistent. Each pod in the PetSet
#         # gets a volume mounted based on this field.
#         volumeMounts:
#         - name: data
#           mountPath: /data
#         # Liveness probe detects situations where MinIO server instance
#         # is not working properly and needs restart. Kubernetes automatically
#         # restarts the pods if liveness checks fail.
#         livenessProbe:
#           httpGet:
#             path: /minio/health/live
#             port: 9000
#           initialDelaySeconds: 120
#           periodSeconds: 20
#   # These are converted to volume claims by the controller
#   # and mounted at the paths mentioned above.
#   volumeClaimTemplates:
#   - metadata:
#       name: data
#     spec:
#       accessModes:
#         - ReadWriteOnce
#       resources:
#         requests:
#           storage: 10Gi


apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: null
  labels:
    app: minio
  name: minio
spec:
  podManagementPolicy: OrderedReady
  replicas: 4
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: minio
  serviceName: minio
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: minio
    spec:
      containers:
      - args:
        - server
        - http://minio-{0...3}.minio.default.svc.cluster.local/data
        env:
        - name: MINIO_ACCESS_KEY
          value: minio
        - name: MINIO_SECRET_KEY
          value: minio123
        image: sinhaashish/minio:services
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /minio/health/live
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 1
        name: minio
        ports:
        - containerPort: 9000
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  updateStrategy:
    type: OnDelete
  volumeClaimTemplates:
  - metadata:
      creationTimestamp: null
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      volumeMode: Filesystem
    status:
      phase: Pending
status:
  replicas: 0